/**
 * Project      graduation-cap-leds
 * @file        micro_LED.ino
 * @author      Sean Duffie
 * @link        https://github.com/SeanDuffie/graduation-cap-leds
 * 
 * The purpose of this project is to create a 
 */

#include "FastLED.h"
// #include <FastLED_NeoPixel.h>

// Which pin on the Arduino is connected to the LEDs?
#define DATA_PIN 3
#define COLOR_ORDER GRB
#define CHIPSET     WS2812B

// LED brightness, 0 (min) to 255 (max)
#define BRIGHTNESS 50

// Amount of time for each half-blink, in milliseconds
#define BLINK_TIME 100

// How many LEDs are attached to the Arduino?
const uint8_t WIDTH = 22;
const uint8_t LENGTH = 22;
#define NUM_LEDS (WIDTH * LENGTH)
// const uint8_t LAST_VISIBLE_LED = NUM_LEDS-1;

// Param for different pixel layouts
const bool    kMatrixSerpentineLayout = true;
const bool    kMatrixVertical = false;

/* Declare the NeoPixel strip object:
*     * Argument 1 = Number of LEDs in the LED strip
*     * Argument 2 = Arduino pin number
*     * Argument 3 = LED strip color order
* 
* The FastLED_NeoPixel version uses template arguments instead of function
* arguments. Note the use of '<>' brackets!
* 
* You can switch between libraries by commenting out one of these two objects.
* In this example they should behave identically.
*/
// Adafruit_NeoPixel strip(NUM_LEDS, DATA_PIN, NEO_GRB);  // <- Adafruit NeoPixel version
// FastLED_NeoPixel<NUM_LEDS, DATA_PIN, NEO_GRB> strip;      // <- FastLED NeoPixel version

CRGB leds_plus_safety_pixel[NUM_LEDS];
CRGB* const leds( leds_plus_safety_pixel );

/** Helper functions for an two-dimensional XY matrix of pixels.
    Simple 2-D demo code is included as well.

        XY(x,y) takes x and y coordinates and returns an LED index number,
                for use like this:  leds[ XY(x,y) ] == CRGB::Red;
                No error checking is performed on the ranges of x and y.

        XYsafe(x,y) takes x and y coordinates and returns an LED index number,
                for use like this:  leds[ XYsafe(x,y) ] == CRGB::Red;
                Error checking IS performed on the ranges of x and y, and an
                index of "-1" is returned.  Special instructions below
                explain how to use this without having to do your own error
                checking every time you use this function.  
                This is a slightly more advanced technique, and 
                it REQUIRES SPECIAL ADDITIONAL setup, described below.
 */

/** Set 'kMatrixSerpentineLayout' to false if your pixels are 
    laid out all running the same way, like this:

    0 >  1 >  2 >  3 >  4
                        |
    .----<----<----<----'
    |
    5 >  6 >  7 >  8 >  9
                        |
    .----<----<----<----'
    |
    10 > 11 > 12 > 13 > 14
                        |
    .----<----<----<----'
    |
    15 > 16 > 17 > 18 > 19

    Set 'kMatrixSerpentineLayout' to true if your pixels are 
    laid out back-and-forth, like this:

    0 >  1 >  2 >  3 >  4
                        |
                        |
    9 <  8 <  7 <  6 <  5
    |
    |
    10 > 11 > 12 > 13 > 14
                        |
                        |
    19 < 18 < 17 < 16 < 15

    Bonus vocabulary word: anything that goes one way 
    in one row, and then backwards in the next row, and so on
    is call "boustrophedon", meaning "as the ox plows."


    This function will return the right 'led index number' for 
    a given set of X and Y coordinates on your matrix.  
    IT DOES NOT CHECK THE COORDINATE BOUNDARIES.  
    That's up to you.  Don't pass it bogus values.

    Use the "XY" function like this:

    for( uint8_t x = 0; x < kMatrixWidth; x++) {
        for( uint8_t y = 0; y < kMatrixHeight; y++) {
        
        // Here's the x, y to 'led index' in action: 
        leds[ XY( x, y) ] = CHSV( random8(), 255, 255);
        
        }
    }
 */
uint16_t XY( uint8_t x, uint8_t y) {
    uint16_t i;

    if (kMatrixSerpentineLayout == false) {
        if (kMatrixVertical == false) {
            i = (y * WIDTH) + x;
        } else {
            i = LENGTH * (WIDTH - (x + 1)) + y;
        }
    }

    if (kMatrixSerpentineLayout == true) {
        if (kMatrixVertical == false) {
            if (y & 0x01) {
                // Odd rows run backwards
                uint8_t reverseX = (WIDTH - 1) - x;
                i = (y * WIDTH) + reverseX;
            } else {
                // Even rows run forwards
                i = (y * WIDTH) + x;
            }
        } else { // vertical positioning
            if (x & 0x01) {
                i = LENGTH * (WIDTH - (x + 1)) + y;
            } else {
                i = LENGTH * (WIDTH - x) - (y + 1);
            }
        }
    }

    return i;
}

/** Once you've gotten the basics working (AND NOT UNTIL THEN!)
    here's a helpful technique that can be tricky to set up, but 
    then helps you avoid the needs for sprinkling array-bound-checking
    throughout your code.

    It requires a careful attention to get it set up correctly, but
    can potentially make your code smaller and faster.

    Suppose you have an 8 x 5 matrix of 40 LEDs.  Normally, you'd
    delcare your leds array like this:
    CRGB leds[40];
    But instead of that, declare an LED buffer with one extra pixel in
    it, "leds_plus_safety_pixel".  Then declare "leds" as a pointer to
    that array, but starting with the 2nd element (id=1) of that array: 
    CRGB leds_with_safety_pixel[41];
    CRGB* const leds( leds_plus_safety_pixel + 1);
    Then you use the "leds" array as you normally would.
    Now "leds[0..N]" are aliases for "leds_plus_safety_pixel[1..(N+1)]",
    AND leds[-1] is now a legitimate and safe alias for leds_plus_safety_pixel[0].
    leds_plus_safety_pixel[0] aka leds[-1] is now your "safety pixel".

    Now instead of using the XY function above, use the one below, "XYsafe".

    If the X and Y values are 'in bounds', this function will return an index
    into the visible led array, same as "XY" does.
    HOWEVER -- and this is the trick -- if the X or Y values
    are out of bounds, this function will return an index of -1.
    And since leds[-1] is actually just an alias for leds_plus_safety_pixel[0],
    it's a totally safe and legal place to access.  And since the 'safety pixel'
    falls 'outside' the visible part of the LED array, anything you write 
    there is hidden from view automatically.
    Thus, this line of code is totally safe, regardless of the actual size of
    your matrix:
    leds[ XYsafe( random8(), random8() ) ] = CHSV( random8(), 255, 255);

    The only catch here is that while this makes it safe to read from and
    write to 'any pixel', there's really only ONE 'safety pixel'.  No matter
    what out-of-bounds coordinates you write to, you'll really be writing to
    that one safety pixel.  And if you try to READ from the safety pixel,
    you'll read whatever was written there last, reglardless of what coordinates
    were supplied.
 */
uint16_t XYsafe( uint8_t x, uint8_t y) {
    if( x >= WIDTH) return -1;
    if( y >= LENGTH) return -1;
    return XY(x,y);
}

/*********** IMAGE LIB **********/
const long Doge[] PROGMEM =
{
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x506420,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x9bb365,0x8fa54a,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x70b42e,0x010103,0x000000,0x000000,0x000000,0x000000,0x000000,0x5b6a3f,0x88ae4a,0x579324,0x000400,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000104,0x8cc741,0x97c73f,0x69823a,0x030503,0x030405,0x010005,0x7d964e,0x74a53a,0x63903a,0x6aa239,0x010003,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xb1e660,0xa4d35f,0x90c338,0x8cc837,0x9fd74b,0xa0d950,0x84c83f,0x4f8b1b,0x699d2f,0x304c1d,0x70a83f,0x010105,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000200,0xb2da6c,0xb4de6a,0xc4e684,0xb4d56d,0x7db12e,0x8cba48,0x9ebe5a,0x90bb45,0x95c649,0x77ad32,0x5b8639,0x304f14,0x7eb136,0x030100,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0xa3bd6b,0xbee679,0xc3e08a,0xadc676,0x9dc456,0x86b23b,0xb6cf76,0xa9c872,0x78a12f,0x94c049,0xa0ca54,0x82b630,0x7eb13f,0x86bc4f,0x171a10,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0xd6eda9,0xdff0af,0x343c27,0x9eba61,0xaedc61,0x9dc95c,0xaac678,0x799050,0x9bbe4d,0x90bc45,0xa1c758,0xa8ce60,0x90c43c,0x41850f,0xb0d86f,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0xe4efc6,0xafd06f,0xa3c668,0xacdc5c,0xb9e574,0x91c44b,0x15230c,0x1d2621,0x253413,0x9cc45a,0xa5cb5e,0x9fc757,0x9ccb4a,0x74b22e,0x9ed057,0x010101,0x000000,0x000000,
0x000000,0x000000,0x000000,0x1e2218,0xdee8bb,0xd8e4b1,0xb3c685,0xb2ce76,0xb1d473,0x9fcd5b,0x9cbf62,0x96b565,0xa0c765,0xc5d396,0xbdce8f,0xbbcb88,0xa6c66c,0x93c440,0x97c048,0x000305,0x000000,0x000000,
0x000000,0x000000,0x000000,0xd1daa7,0xe0ebc5,0x1f211f,0x11110f,0x292f14,0xc6db97,0xb0cf70,0xbcd583,0xc1db87,0xb2c97f,0xbfcc97,0xc8d79d,0xc2d093,0xb5d27c,0xa9d15d,0xa3cf54,0x010000,0x000000,0x000000,
0x000000,0x000000,0x000000,0xc8d297,0xb0ba94,0x25271e,0x12130d,0x767964,0xacb58a,0xa3c269,0xb8c989,0xbecb94,0xc4d19a,0xc0cf95,0xb3c884,0xb1c57e,0x9ebf68,0x8db942,0x99c54e,0xb5d07a,0x000000,0x000000,
0x000000,0x000000,0x010101,0xd8e5a6,0x9ead7b,0x4e5340,0x404436,0x949c7c,0xabb97e,0x9cbc62,0xaec282,0xacbd7b,0xaabd7a,0xaec17d,0xa6bd71,0xb0c97c,0x9fbe65,0x84af39,0x8cb741,0xa5ce64,0x000000,0x000000,
0x000000,0x000000,0x000002,0xd8e8a3,0xc3d390,0x455036,0x2e3122,0x1f240f,0x354015,0x22310b,0x9ab372,0xa3bb6d,0xafc67d,0xaac078,0xb7cb85,0xb3c67f,0x97b656,0x86b438,0x8fbd40,0xa4d059,0x090804,0x000000,
0x000000,0x000000,0x000000,0xb2b886,0xc2d98c,0xb6cd82,0x839654,0x96a967,0x89a254,0x9cb962,0xa6c36c,0x9ebb64,0xaabf74,0xb2c783,0xaac172,0xa3c466,0x8fbb44,0x8bbe3e,0x79ae2d,0x96c74a,0x1b2110,0x000000,
0x000000,0x000000,0x000000,0xa5ac7b,0xc3de8c,0xbad881,0xb0cc71,0xa7c368,0xa1bb66,0x9dba63,0x9bb861,0xa2c06c,0xb3c97f,0xaabf7b,0xaec877,0x99be52,0x81b63b,0x70ad2d,0x7fb538,0x8abb3b,0x272d17,0x000000,
0x000000,0x000000,0x000000,0xc7df91,0xb4d66e,0xb2d173,0xadcb6d,0xa6c466,0x9ebd5e,0x97b557,0x97b557,0xb2cc75,0xacc473,0x9eb465,0x9eb865,0x94b950,0x83b339,0x7fae34,0x93ba48,0xa5c75e,0x2c341d,0x000000,
0x000000,0x000000,0x010101,0xc7e28f,0xbbd582,0xafcf6b,0xa0c35e,0xa1c45f,0x97ba55,0x9cbd5b,0x90ae50,0x8fad4e,0x9eba61,0xa8c56e,0xa0bd64,0x98b758,0x8aaf43,0xb1cf70,0xafcc72,0xb0cd74,0x000300,0x000000,
0x000000,0x000000,0x000000,0xd1ea9a,0xc5dc8f,0xb3d17b,0xa6c964,0x91b44f,0x90b34e,0x83a042,0x99b35c,0xaac178,0xa2b971,0xa4c26e,0xafc976,0xa9c76d,0xc0d58b,0xb5c97e,0xb4c480,0xacc972,0x191c0f,0x000000,
0x000000,0x000000,0x000002,0xbece7b,0xcade9a,0xb8cf82,0xa4c065,0x9bba5a,0x95b558,0x9bb863,0xa9c073,0xa6bb71,0xb0c57b,0xbcd187,0xa4bb70,0xb6cd82,0xb4c882,0xb1c582,0xb7cb84,0xb0d075,0x2a3119,0x000000,
0x000000,0x000002,0x587137,0xc9e58c,0xc0d988,0xb8cf7c,0xa9c66d,0x98b758,0x98b658,0xa3b86c,0xa9be72,0xa6bb71,0xb3c87f,0xb3c67f,0xb5ca88,0xb7cc8a,0xc1d694,0xc4d490,0xb5cf7b,0xa1c755,0x2d371a,0x000000,
0x030004,0xbded77,0xd0ef8f,0xd2e79c,0xbfd887,0xaeca6f,0xacc970,0xa7c667,0x9cba60,0xa4b86d,0xa4b96d,0xaec379,0xa9be75,0xb6ca83,0xb4c987,0xbbd08e,0xb9cd87,0xb8d27c,0xa1c75f,0x8dbd3f,0x303a1b,0x000000
};

const long Arthur[] PROGMEM =
{
0xcbe509,0xc8e305,0xc9e60d,0xc9e506,0xc9e506,0xc9e70f,0xc7e209,0xc9e105,0xcae605,0xc9e409,0xc9e406,0xcae608,0xcae406,0xc8e20c,0xcae30e,0xc9e004,0x6d8902,0x93af21,0xc6e525,0xc5e40b,0xc5e30a,0xc7e80d,
0xcae206,0xc7df03,0xcce70d,0xc9e105,0xc9e105,0xcbe002,0xc7e30b,0xcae206,0xcbe708,0xcae704,0xc8e40a,0xcbe706,0xcbde03,0xc9e408,0xcae206,0xcbe104,0x718d0e,0xc8df06,0xc9e406,0xcbe608,0xcde308,0xc8e305,
0xcbe106,0xcae206,0xcbe106,0xcbe106,0xcbe106,0xcbe104,0xc7e012,0xc4de23,0xbedb3b,0x859a05,0x6d8b00,0x799a05,0x708b19,0x9ab81e,0xcae41e,0xcdde0e,0xc8e33a,0xc9e60b,0xcde007,0xcbdd05,0xcbe106,0xcbe307,
0xcae005,0xcae005,0xcbe106,0xc9e105,0xcade07,0x8db011,0xc8e419,0xb4d037,0xcfe207,0xcae30b,0xc6e402,0xcce408,0xc0d230,0xcae208,0xc6df13,0xbbd43d,0xcce819,0xcee00a,0xccdf06,0xc8e106,0xc7dd1a,0xcae02b,
0xc9e205,0xc9e105,0xcbe307,0xcadf0e,0xb5cd1f,0xcee002,0xcae204,0xc8e015,0xcfe209,0xcbe106,0xccdf06,0xcbde02,0xc5d70e,0xcbe20d,0xcde206,0xb1c13a,0xcce413,0xcdd936,0x92a055,0x926e8e,0x9d76ac,0x9d6fac,
0xcae206,0xcae206,0xc6e00c,0xc0d64a,0xc8e619,0xcbe104,0xcce408,0xcae60f,0xcce425,0xcbdf0c,0xc7e00a,0xc8e021,0xc1de41,0xc4de3d,0xc5e021,0xc2d832,0x9b7eab,0x9c6eb3,0x9a71ae,0x9b71ab,0x9c71ad,0x9f6fad,
0xcee409,0xcce207,0xbed821,0xc6dd22,0xcee510,0xc8e305,0xcae003,0xc9de15,0x485e00,0x98b94f,0x95b74c,0x92bb51,0x93bd56,0x96b749,0x98b74f,0x5a7a21,0x918aa4,0x9c6cae,0x9c6eb3,0x9e6dad,0x9e6dad,0x9b70ac,
0xcbe502,0xc4d910,0xcae313,0xcce30f,0xc5dd1f,0xc9e110,0x638008,0x96b952,0x93bb57,0x95bb4e,0x94bc4c,0x94bc4c,0x94bc4e,0x95bd4e,0x97bd4e,0x96bf46,0x94be55,0x98af66,0x987ca8,0x9c6dac,0x9b6dad,0x9d72ae,
0xc0e432,0xbdd70a,0xcbe924,0xcde200,0x84a021,0x96bc4b,0x94bb53,0x96ba4c,0x95ba4e,0x97be4c,0x96bd4b,0x96bd4b,0x97be4c,0x96bd4b,0x95bd4a,0x96bd4b,0x95bc4a,0x96bc4f,0x8ebd52,0x45433c,0x9d6eaf,0x411853,
0x58a066,0xe1f0ca,0xadc554,0xc1d714,0x98b84f,0x91c14f,0x95bb4e,0x96bd4b,0x97b84a,0x96bd4b,0x96bd4b,0x97be4c,0x96bd4b,0x97be4c,0x96bd4b,0x9ac14f,0x96bd4b,0x96bd4b,0x96bd4b,0x8bbf55,0x967bab,0x9a71b0,
0x5ca466,0xdbebe1,0x63697e,0xb2ca54,0x91ba53,0x94bc4c,0x95bb4e,0x95bd4d,0x94be4c,0x96bd49,0x96bd4b,0x96bd4b,0x96bd4b,0x97be4c,0x96bd4b,0x96bd4b,0x96bd4b,0x96bd4b,0x96bd4b,0x94ba4b,0x434248,0x9c6dab,
0x5ca767,0xbab5b4,0x4f4064,0x7b5482,0x90b95d,0x95bb4c,0x95ba4e,0x94bc4e,0x93bb4e,0x94bb4f,0x93bb4e,0x94be4a,0x95bb4e,0x95bb4c,0x96bd48,0x95bb4c,0x96bd4b,0x95b94b,0x95bc4a,0x93bb4d,0x95b372,0x9b6eb0,
0x65a059,0x979689,0xa386b1,0x80508e,0x92a775,0x93b952,0x95bb4e,0x94ba4d,0x95ba4e,0x93be4e,0x95bb4c,0x96bd4b,0x97be4c,0x97be4c,0x96bd4b,0x95bd4b,0x94bc4f,0x94bd57,0x99bc59,0x95bb4e,0x8caf4c,0x9975ac,
0x74b46f,0xe7faad,0xa9b38e,0x9574a4,0x343e21,0x93bf4a,0x94bc4e,0x95bb4e,0x96b84c,0x96b64d,0x95ba4e,0x94bf50,0x97be4c,0x95bc4a,0x96bd4b,0x95bd4d,0x92bd4e,0x8ebf4d,0x93b069,0x96ba4b,0x90b852,0x9e82a1,
0x62b372,0x5cb270,0x236d34,0x9283af,0x8f8381,0x92ba4d,0x95bb4c,0x95bb4d,0x94ba4b,0x93bc4d,0x96bc4f,0x95bb4c,0x95bb4c,0x94bc4e,0x96bd4b,0x97bd4c,0x95bd4c,0x92b346,0x618134,0x4e7512,0x95bb4e,0x413437,
0x0d0c11,0x2b3b33,0x809d8c,0x9c7db8,0x9b82a4,0x94be4f,0x95ba4f,0x95b74f,0x96b84e,0x95b74b,0x96b84c,0x96b84f,0x94bb47,0x95b949,0x95b84d,0x96be4e,0x95bc4a,0x96bd49,0x92b54e,0x91b058,0x92ba54,0x60535f,
0x45063a,0x431539,0x4a1241,0x9d6faa,0x9877a1,0x96b763,0x98bc4e,0x96b84f,0x96b84c,0x96b84f,0x97b74c,0x96b84c,0x97bb4d,0x96b84c,0x96b84e,0x97b84a,0x95b74d,0x96bd49,0x94b94d,0x94bb5d,0x95b163,0x9b6dae,
0x37002c,0x501e47,0x440d3e,0x9e76ae,0x9978ac,0x6d7d4b,0x95bb4d,0x96b84f,0x95b74d,0x96ba4c,0x95ba4e,0x96b84c,0x93b549,0x95b850,0x4f701e,0x395900,0x94ba4d,0x95bc4a,0x95bd4f,0x90b35c,0x9571a5,0x9e70ae,
0x4c1546,0x450e40,0x440d3e,0x9e71b1,0x9a74ad,0x9a89a3,0x92b852,0x95ba4c,0x99bb51,0x95b74b,0x96b74c,0x96b84c,0x94ba49,0x98bc4e,0x96bb52,0x627e27,0x90be52,0x95bc4c,0x94b55c,0x6b5f6b,0x9773ad,0x9e6dad,
0x4e0f45,0x4f1044,0x48133e,0x9978ac,0x9d74af,0x926ba1,0x676c3e,0x95bb4c,0x97bb4d,0x97bc50,0x97b94f,0x95ba4e,0x92bb52,0x97b748,0x96bb4c,0x94bb51,0x635460,0x9374a2,0x9c7bad,0x9c6eb4,0x9e6aac,0x9e6dad,
0x4b163d,0x532a51,0x53244b,0x341641,0x9d72ae,0x9b75ae,0x996c9f,0x96b467,0x94be4c,0x95b650,0x96bc58,0x92be47,0x94bb47,0xa2bf63,0x987795,0x9776ac,0x9c71ad,0x9e6dad,0x9f74b0,0x9e6dad,0x9e6dad,0x9e6dad,
0x68a679,0x64987b,0x5f817a,0x456c60,0x9976ae,0x9b72ad,0x9e70ae,0x9e74ae,0x80697b,0x9cb16d,0x96b458,0x97a080,0x705c7f,0x9b6aaf,0x9e6dad,0x9e6fae,0x9e6dad,0x9e6dad,0x9f6eae,0x9e6dad,0x9e6dad,0x9e6dad

};

const long Noot[] PROGMEM =
{
0x1d1c32,0x1d1c32,0x1d1d35,0x1f1e35,0x1e1e36,0x1f1f37,0x1e1d34,0x1d1c2f,0x121011,0x111013,0x110f10,0x110f10,0x110f10,0x111015,0x100f12,0x161622,0x1f1e35,0x201f35,0x1d1d35,0x1d1d35,0x1d1d35,0x1c1c34,
0x292847,0x292847,0x282746,0x292848,0x292a49,0x121116,0x131112,0x121114,0x121114,0x121114,0x121114,0x121114,0x121114,0x121114,0x121114,0x121114,0x121114,0x131111,0x2a2a47,0x292848,0x292848,0x282948,
0x2f2c52,0x302d53,0x312e54,0x161322,0x111014,0x121114,0x121114,0x121114,0x121114,0x121114,0x121114,0x121114,0x121114,0x121114,0x121114,0x121114,0x121114,0x0e0d10,0x0b0b0b,0x202238,0x302d53,0x2f2c52,
0x323359,0x34345c,0x100f1b,0x000000,0x060507,0x121114,0x121114,0x121114,0x121114,0x121115,0x121114,0x121114,0x121113,0x121114,0x121113,0x121114,0x121013,0x0f0e0e,0x000000,0x010000,0x121124,0x323258,
0x37355f,0x373855,0x000000,0x000000,0x0e0c0d,0x110f10,0x131112,0x131112,0x121011,0x121111,0x121011,0x121011,0x110f10,0x110f10,0x0a0809,0x020202,0x000000,0x000000,0x000000,0x000000,0x000000,0x2e3047,
0x3b396a,0x000001,0x000000,0x020203,0x010000,0x030303,0x0a0809,0x0d0b0c,0x0c0a0b,0x0a0809,0x0a0809,0x090708,0x0b090a,0x0b090a,0x0b090a,0x030303,0x000000,0x010101,0x010101,0x010101,0x000000,0x000000,
0x0f0d1f,0x000000,0xada3ad,0x242327,0x4a434b,0xaaa1ab,0x000000,0x070707,0x070707,0x060606,0x060606,0x040404,0x040404,0x050505,0x050505,0x000000,0xa9a1aa,0x9a929c,0x212024,0xa499a6,0x000000,0x000000,
0x010201,0x0e0d10,0x040203,0x3f3a41,0x010102,0xb0a3b1,0x010101,0x000000,0x010101,0x010101,0x000000,0x000000,0x000000,0x000000,0x000000,0x010101,0xaca2ae,0x010103,0x3a353e,0x020202,0xa39ba6,0x000000,
0x000000,0xb0a8b2,0x010101,0x010200,0x020204,0xafa2b0,0x020202,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x010102,0x948e96,0x000000,0x010701,0x010200,0xaba0ae,0x000000,
0x000000,0x69656d,0x060608,0xfefefe,0xa49daa,0xaba1ac,0x000000,0x000000,0x000000,0x020202,0x1e311b,0x344d33,0x010d00,0x000000,0x000000,0x010101,0xaca1b0,0x000102,0xe4e4e4,0x020202,0xaea4b0,0x000000,
0x010101,0x010201,0xbeb8c4,0xcabecc,0x4e4951,0x000000,0x010101,0x3a6334,0x3e6439,0x5c785b,0x5e7759,0x536f4f,0x3f6539,0x3e6435,0x000100,0x000000,0x020201,0xe8ddeb,0xebe1ed,0xe4d9e8,0x010000,0x020202,
0x040404,0x28242b,0x262229,0x241f26,0x1f1d1e,0x294127,0x3e6138,0x3f6239,0x3f6239,0x63765d,0x61765e,0x40633a,0x40633a,0x40633a,0x3f6239,0x030304,0x141213,0x131315,0x0f0f0f,0x0d0d0d,0x0f0f0f,0x040404,
0x0f0e11,0x343037,0x3d3841,0x3d3841,0x201921,0x40633a,0x40633a,0x41643b,0x41643a,0x637862,0x607560,0x42653c,0x42653c,0x41643b,0x41643b,0x4a7746,0x38333c,0x37323b,0x37323b,0x37343c,0x3a363d,0x222124,
0x0f0e11,0x36313a,0x3e3942,0x403c45,0x40633a,0x42653c,0x42663e,0x446642,0x466844,0x436641,0x436641,0x456241,0x456640,0x456640,0x446740,0x538a4d,0x413a48,0x403b46,0x3e3943,0x3e3942,0x3c3740,0x2e2d30,
0x0a090c,0x332e37,0x3d3843,0x3f3946,0x56904f,0x497642,0x74be6a,0x7cc872,0x7dc674,0x7dc672,0x7dc774,0x7fca74,0x73c56a,0x61a059,0x72c26a,0x433d50,0x413848,0x403948,0x413a47,0x3d3843,0x39343d,0x222126,
0x0d0e0d,0x26232b,0x3b3441,0x3e3544,0x423446,0x413a49,0x403749,0x42384b,0x43384e,0x43384d,0x443a4f,0x43394e,0x433950,0x433851,0x42384c,0x41384b,0x41374a,0x41374a,0x403749,0x3b3443,0x332b36,0x1e1a21,
0x483b78,0x100d15,0x302937,0x3e3547,0x40364a,0x40364c,0x42364e,0x42364e,0x43354e,0x42364e,0x43374f,0x43374e,0x42364e,0x43354e,0x42364e,0x41374d,0x40364a,0x43394d,0x3c3343,0x362f3e,0x25222a,0x0e0d0f,
0x483d75,0x4c4275,0x1b161f,0x332a3a,0x40344c,0x40344c,0x41354d,0x42364e,0x423552,0x423552,0x433653,0x453854,0x443754,0x453855,0x463956,0x463a56,0x443852,0x3f334b,0x372e3f,0x251e2b,0x0b070e,0x494173,
0x463a6e,0x473b6f,0x473a73,0x191519,0x2d2537,0x453752,0x463756,0x443554,0x433452,0x433452,0x443453,0x453554,0x453654,0x463655,0x453654,0x433653,0x41354e,0x322a3c,0x19161d,0x03020b,0x483d6f,0x453a6e,
0x423669,0x43376b,0x45396b,0x463a6e,0x3d345e,0x221a29,0x3c3048,0x413451,0x463657,0x473757,0x49395a,0x483858,0x463556,0x463855,0x443353,0x3e314e,0x262231,0x0e0d13,0x07020e,0x43376b,0x44386c,0x423669,
0x3f3261,0x403363,0x413567,0x423668,0x44386a,0x433565,0x473c68,0x100d15,0x010103,0x010105,0x030303,0x030208,0x040509,0x000201,0x000000,0x000000,0x000000,0x000000,0x000000,0x010100,0x443b68,0x403363,
0x3a2d5a,0x3c2f5c,0x3e3161,0x3f3262,0x403264,0x030400,0x000000,0x000000,0x000201,0x0c0c10,0x292133,0x352844,0x382b48,0x382844,0x2c2338,0x251e2f,0x14111a,0x0d0c10,0x010102,0x010101,0x000000,0x161125

};

const long NPC[] PROGMEM =
{
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x00ff00,0x808080,0x808080,0x808080,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x00ff00,0x808080,0x808080,0x808080,0x00ff00,0x00ff00,0x808080,0x00ff00,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x808080,0x00ff00,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x808080,0x808080,0x808080,0x00ff00,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x808080,0x808080,0x808080,0x00ff00,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x808080,0x808080,0x00ff00,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x808080,0x808080,0x00ff00,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x00ff00,0x808080,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x808080,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x00ff00,0x808080,0x00ff00,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x00ff00,0x808080,0x808080,0x808080,0x00ff00,0x808080,0x808080,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x808080,0x808080,0x00ff00,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x808080,0x808080,0x808080,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x00ff00,0x808080,0x00ff00,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000
};

const long TEST[] PROGMEM =
{
0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff
};

const long Loss[] PROGMEM =
{
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,
0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x00ff00,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x00ff00,0x00ff00,0x00ff00,0x00ff00,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000
};

void setup() {
//    Serial.begin(115200);
    // XY Matrix
    FastLED.addLeds<CHIPSET, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalSMD5050);
    FastLED.setBrightness(BRIGHTNESS);
    FastLED.clear();
}

void loop() {
    // StartFlash();
    DrawOneFrame(Loss);
    FastLED.show();
    delay(BLINK_TIME*10);

    DrawOneFrame(Noot);
    FastLED.show();
    delay(BLINK_TIME*10);

    DrawOneFrame(Arthur);
    FastLED.show();
    delay(BLINK_TIME*10);

    DrawOneFrame(Doge);
    FastLED.show();
    delay(BLINK_TIME*10);
}

void PixelFlash() {
    for (int i=0; i<LENGTH; i++) {
        leds[XY(i, 0)] = 0xffffff;
        for (int j=1; j<WIDTH; j++) {
            leds[XY(i,j-1)] = 0x000000;
            leds[XY(i,j)] = 0xffffff;
            FastLED.show();
            delay(BLINK_TIME/10);
        }
        leds[XY(i,WIDTH-1)] = 0x000000;
    }
}

void StartFlash() {
    for (int i=0; i<NUM_LEDS; i++) {
        leds[i] = 0xffffff;
    }
    FastLED.show();
    delay(BLINK_TIME);
    for (int i=0; i<NUM_LEDS; i++) {
        leds[i] = 0xff0000;
    }
    FastLED.show();
    delay(BLINK_TIME);
    for (int i=0; i<NUM_LEDS; i++) {
        leds[i] = 0x00ff00;
    }
    FastLED.show();
    delay(BLINK_TIME);
    for (int i=0; i<NUM_LEDS; i++) {
        leds[i] = 0x0000ff;
    }
    FastLED.show();
    delay(BLINK_TIME);
    for (int i=0; i<NUM_LEDS; i++) {
        leds[i] = 0x00ffff;
    }
    FastLED.show();
    delay(BLINK_TIME);
    for (int i=0; i<NUM_LEDS; i++) {
        leds[i] = 0xff00ff;
    }
    FastLED.show();
    delay(BLINK_TIME);
    for (int i=0; i<NUM_LEDS; i++) {
        leds[i] = 0xffff00;
    }
    FastLED.show();
    delay(BLINK_TIME);
}

void SetWhite()
{
 for (int i=0; i<NUM_LEDS; i++) {
   leds[i] = 0xffffff;
 }
}

void DrawOneFrame(const long pixel_arr[])
{
    for(byte y=0; y<LENGTH; y++) {
        for(byte x=0; x<WIDTH; x++) {
            leds[XY(x,y)] = pgm_read_dword(&pixel_arr[(y * WIDTH) + x]);
        }
    }
}
