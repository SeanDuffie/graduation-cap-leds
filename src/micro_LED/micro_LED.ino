/**
 * Project      graduation-cap-leds
 * @file        micro_LED.ino
 * @author      Sean Duffie
 * @link        https://github.com/SeanDuffie/graduation-cap-leds
 * 
 * The purpose of this project is to create a 
 */

#include "FastLED.h"

// Which pin on the Arduino is connected to the LEDs?
#define BUTTON1 2
#define BUTTON2 3
#define BUTTON3 4
#define BUTTON4 5
#define DATA_PIN 6 
#define COLOR_ORDER GRB
#define CHIPSET     WS2812B

// LED brightness, 0 (min) to 255 (max)
#define BRIGHTNESS 50

// Amount of time for each half-blink, in milliseconds
#define BLINK_TIME 25
uint8_t MULTIPLIER = 5;

// How many LEDs are attached to the Arduino?
const uint8_t WIDTH = 22;
const uint8_t LENGTH = 22;
#define NUM_LEDS (WIDTH * LENGTH)
// const uint8_t LAST_VISIBLE_LED = NUM_LEDS-1;

// Param for different pixel layouts
const bool    kMatrixSerpentineLayout = true;
const bool    kMatrixVertical = false;

/* Declare the NeoPixel strip object:
*     * Argument 1 = Number of LEDs in the LED strip
*     * Argument 2 = Arduino pin number
*     * Argument 3 = LED strip color order
* 
* The FastLED_NeoPixel version uses template arguments instead of function
* arguments. Note the use of '<>' brackets!
* 
* You can switch between libraries by commenting out one of these two objects.
* In this example they should behave identically.
*/
// Adafruit_NeoPixel strip(NUM_LEDS, DATA_PIN, NEO_GRB);  // <- Adafruit NeoPixel version
// FastLED_NeoPixel<NUM_LEDS, DATA_PIN, NEO_GRB> strip;      // <- FastLED NeoPixel version

CRGB leds_plus_safety_pixel[NUM_LEDS];
CRGB* const leds( leds_plus_safety_pixel );

/** Helper functions for an two-dimensional XY matrix of pixels.
    Simple 2-D demo code is included as well.

        XY(x,y) takes x and y coordinates and returns an LED index number,
                for use like this:  leds[ XY(x,y) ] == CRGB::Red;
                No error checking is performed on the ranges of x and y.

        XYsafe(x,y) takes x and y coordinates and returns an LED index number,
                for use like this:  leds[ XYsafe(x,y) ] == CRGB::Red;
                Error checking IS performed on the ranges of x and y, and an
                index of "-1" is returned.  Special instructions below
                explain how to use this without having to do your own error
                checking every time you use this function.  
                This is a slightly more advanced technique, and 
                it REQUIRES SPECIAL ADDITIONAL setup, described below.
 */

/** Set 'kMatrixSerpentineLayout' to false if your pixels are 
    laid out all running the same way, like this:

    0 >  1 >  2 >  3 >  4
                        |
    .----<----<----<----'
    |
    5 >  6 >  7 >  8 >  9
                        |
    .----<----<----<----'
    |
    10 > 11 > 12 > 13 > 14
                        |
    .----<----<----<----'
    |
    15 > 16 > 17 > 18 > 19

    Set 'kMatrixSerpentineLayout' to true if your pixels are 
    laid out back-and-forth, like this:

    0 >  1 >  2 >  3 >  4
                        |
                        |
    9 <  8 <  7 <  6 <  5
    |
    |
    10 > 11 > 12 > 13 > 14
                        |
                        |
    19 < 18 < 17 < 16 < 15

    Bonus vocabulary word: anything that goes one way 
    in one row, and then backwards in the next row, and so on
    is call "boustrophedon", meaning "as the ox plows."


    This function will return the right 'led index number' for 
    a given set of X and Y coordinates on your matrix.  
    IT DOES NOT CHECK THE COORDINATE BOUNDARIES.  
    That's up to you.  Don't pass it bogus values.

    Use the "XY" function like this:

    for( uint8_t x = 0; x < kMatrixWidth; x++) {
        for( uint8_t y = 0; y < kMatrixHeight; y++) {
        
        // Here's the x, y to 'led index' in action: 
        leds[ XY( x, y) ] = CHSV( random8(), 255, 255);
        
        }
    }
 */
uint16_t XY( uint8_t x, uint8_t y) {
    uint16_t i;

    if (kMatrixSerpentineLayout == false) {
        if (kMatrixVertical == false) {
            i = (y * WIDTH) + x;
        } else {
            i = LENGTH * (WIDTH - (x + 1)) + y;
        }
    }

    if (kMatrixSerpentineLayout == true) {
        if (kMatrixVertical == false) {
            if (y & 0x01) {
                // Odd rows run backwards
                uint8_t reverseX = (WIDTH - 1) - x;
                i = (y * WIDTH) + reverseX;
            } else {
                // Even rows run forwards
                i = (y * WIDTH) + x;
            }
        } else { // vertical positioning
            if (x & 0x01) {
                i = LENGTH * (WIDTH - (x + 1)) + y;
            } else {
                i = LENGTH * (WIDTH - x) - (y + 1);
            }
        }
    }

    return i;
}

/** Once you've gotten the basics working (AND NOT UNTIL THEN!)
    here's a helpful technique that can be tricky to set up, but 
    then helps you avoid the needs for sprinkling array-bound-checking
    throughout your code.

    It requires a careful attention to get it set up correctly, but
    can potentially make your code smaller and faster.

    Suppose you have an 8 x 5 matrix of 40 LEDs.  Normally, you'd
    delcare your leds array like this:
    CRGB leds[40];
    But instead of that, declare an LED buffer with one extra pixel in
    it, "leds_plus_safety_pixel".  Then declare "leds" as a pointer to
    that array, but starting with the 2nd element (id=1) of that array: 
    CRGB leds_with_safety_pixel[41];
    CRGB* const leds( leds_plus_safety_pixel + 1);
    Then you use the "leds" array as you normally would.
    Now "leds[0..N]" are aliases for "leds_plus_safety_pixel[1..(N+1)]",
    AND leds[-1] is now a legitimate and safe alias for leds_plus_safety_pixel[0].
    leds_plus_safety_pixel[0] aka leds[-1] is now your "safety pixel".

    Now instead of using the XY function above, use the one below, "XYsafe".

    If the X and Y values are 'in bounds', this function will return an index
    into the visible led array, same as "XY" does.
    HOWEVER -- and this is the trick -- if the X or Y values
    are out of bounds, this function will return an index of -1.
    And since leds[-1] is actually just an alias for leds_plus_safety_pixel[0],
    it's a totally safe and legal place to access.  And since the 'safety pixel'
    falls 'outside' the visible part of the LED array, anything you write 
    there is hidden from view automatically.
    Thus, this line of code is totally safe, regardless of the actual size of
    your matrix:
    leds[ XYsafe( random8(), random8() ) ] = CHSV( random8(), 255, 255);

    The only catch here is that while this makes it safe to read from and
    write to 'any pixel', there's really only ONE 'safety pixel'.  No matter
    what out-of-bounds coordinates you write to, you'll really be writing to
    that one safety pixel.  And if you try to READ from the safety pixel,
    you'll read whatever was written there last, reglardless of what coordinates
    were supplied.
 */
uint16_t XYsafe( uint8_t x, uint8_t y) {
    if( x >= WIDTH) return -1;
    if( y >= LENGTH) return -1;
    return XY(x,y);
}

/*********** IMAGE LIB **********/
const long Doge[] PROGMEM =
{
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x645020,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xb39b65,0xa58f4a,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xb4702e,0x010103,0x000000,0x000000,0x000000,0x000000,0x000000,0x6a5b3f,0xae884a,0x935724,0x040000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x010004,0xc78c41,0xc7973f,0x82693a,0x050303,0x040305,0x000105,0x967d4e,0xa5743a,0x90633a,0xa26a39,0x000103,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xe6b160,0xd3a45f,0xc39038,0xc88c37,0xd79f4b,0xd9a050,0xc8843f,0x8b4f1b,0x9d692f,0x4c301d,0xa8703f,0x010105,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x020000,0xdab26c,0xdeb46a,0xe6c484,0xd5b46d,0xb17d2e,0xba8c48,0xbe9e5a,0xbb9045,0xc69549,0xad7732,0x865b39,0x4f3014,0xb17e36,0x010300,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0xbda36b,0xe6be79,0xe0c38a,0xc6ad76,0xc49d56,0xb2863b,0xcfb676,0xc8a972,0xa1782f,0xc09449,0xcaa054,0xb68230,0xb17e3f,0xbc864f,0x1a1710,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0xedd6a9,0xf0dfaf,0x3c3427,0xba9e61,0xdcae61,0xc99d5c,0xc6aa78,0x907950,0xbe9b4d,0xbc9045,0xc7a158,0xcea860,0xc4903c,0x85410f,0xd8b06f,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0xefe4c6,0xd0af6f,0xc6a368,0xdcac5c,0xe5b974,0xc4914b,0x23150c,0x261d21,0x342513,0xc49c5a,0xcba55e,0xc79f57,0xcb9c4a,0xb2742e,0xd09e57,0x010101,0x000000,0x000000,
0x000000,0x000000,0x000000,0x221e18,0xe8debb,0xe4d8b1,0xc6b385,0xceb276,0xd4b173,0xcd9f5b,0xbf9c62,0xb59665,0xc7a065,0xd3c596,0xcebd8f,0xcbbb88,0xc6a66c,0xc49340,0xc09748,0x030005,0x000000,0x000000,
0x000000,0x000000,0x000000,0xdad1a7,0xebe0c5,0x211f1f,0x11110f,0x2f2914,0xdbc697,0xcfb070,0xd5bc83,0xdbc187,0xc9b27f,0xccbf97,0xd7c89d,0xd0c293,0xd2b57c,0xd1a95d,0xcfa354,0x000100,0x000000,0x000000,
0x000000,0x000000,0x000000,0xd2c897,0xbab094,0x27251e,0x13120d,0x797664,0xb5ac8a,0xc2a369,0xc9b889,0xcbbe94,0xd1c49a,0xcfc095,0xc8b384,0xc5b17e,0xbf9e68,0xb98d42,0xc5994e,0xd0b57a,0x000000,0x000000,
0x000000,0x000000,0x010101,0xe5d8a6,0xad9e7b,0x534e40,0x444036,0x9c947c,0xb9ab7e,0xbc9c62,0xc2ae82,0xbdac7b,0xbdaa7a,0xc1ae7d,0xbda671,0xc9b07c,0xbe9f65,0xaf8439,0xb78c41,0xcea564,0x000000,0x000000,
0x000000,0x000000,0x000002,0xe8d8a3,0xd3c390,0x504536,0x312e22,0x241f0f,0x403515,0x31220b,0xb39a72,0xbba36d,0xc6af7d,0xc0aa78,0xcbb785,0xc6b37f,0xb69756,0xb48638,0xbd8f40,0xd0a459,0x080904,0x000000,
0x000000,0x000000,0x000000,0xb8b286,0xd9c28c,0xcdb682,0x968354,0xa99667,0xa28954,0xb99c62,0xc3a66c,0xbb9e64,0xbfaa74,0xc7b283,0xc1aa72,0xc4a366,0xbb8f44,0xbe8b3e,0xae792d,0xc7964a,0x211b10,0x000000,
0x000000,0x000000,0x000000,0xaca57b,0xdec38c,0xd8ba81,0xccb071,0xc3a768,0xbba166,0xba9d63,0xb89b61,0xc0a26c,0xc9b37f,0xbfaa7b,0xc8ae77,0xbe9952,0xb6813b,0xad702d,0xb57f38,0xbb8a3b,0x2d2717,0x000000,
0x000000,0x000000,0x000000,0xdfc791,0xd6b46e,0xd1b273,0xcbad6d,0xc4a666,0xbd9e5e,0xb59757,0xb59757,0xccb275,0xc4ac73,0xb49e65,0xb89e65,0xb99450,0xb38339,0xae7f34,0xba9348,0xc7a55e,0x342c1d,0x000000,
0x000000,0x000000,0x010101,0xe2c78f,0xd5bb82,0xcfaf6b,0xc3a05e,0xc4a15f,0xba9755,0xbd9c5b,0xae9050,0xad8f4e,0xba9e61,0xc5a86e,0xbda064,0xb79858,0xaf8a43,0xcfb170,0xccaf72,0xcdb074,0x030000,0x000000,
0x000000,0x000000,0x000000,0xead19a,0xdcc58f,0xd1b37b,0xc9a664,0xb4914f,0xb3904e,0xa08342,0xb3995c,0xc1aa78,0xb9a271,0xc2a46e,0xc9af76,0xc7a96d,0xd5c08b,0xc9b57e,0xc4b480,0xc9ac72,0x1c190f,0x000000,
0x000000,0x000000,0x000002,0xcebe7b,0xdeca9a,0xcfb882,0xc0a465,0xba9b5a,0xb59558,0xb89b63,0xc0a973,0xbba671,0xc5b07b,0xd1bc87,0xbba470,0xcdb682,0xc8b482,0xc5b182,0xcbb784,0xd0b075,0x312a19,0x000000,
0x000000,0x000002,0x715837,0xe5c98c,0xd9c088,0xcfb87c,0xc6a96d,0xb79858,0xb69858,0xb8a36c,0xbea972,0xbba671,0xc8b37f,0xc6b37f,0xcab588,0xccb78a,0xd6c194,0xd4c490,0xcfb57b,0xc7a155,0x372d1a,0x000000,
0x000304,0xedbd77,0xefd08f,0xe7d29c,0xd8bf87,0xcaae6f,0xc9ac70,0xc6a767,0xba9c60,0xb8a46d,0xb9a46d,0xc3ae79,0xbea975,0xcab683,0xc9b487,0xd0bb8e,0xcdb987,0xd2b87c,0xc7a15f,0xbd8d3f,0x3a301b,0x000000
};

const long Arthur[] PROGMEM =
{
0xe5cb09,0xe3c805,0xe6c90d,0xe5c906,0xe5c906,0xe7c90f,0xe2c709,0xe1c905,0xe6ca05,0xe4c909,0xe4c906,0xe6ca08,0xe4ca06,0xe2c80c,0xe3ca0e,0xe0c904,0x896d02,0xaf9321,0xe5c625,0xe4c50b,0xe3c50a,0xe8c70d,
0xe2ca06,0xdfc703,0xe7cc0d,0xe1c905,0xe1c905,0xe0cb02,0xe3c70b,0xe2ca06,0xe7cb08,0xe7ca04,0xe4c80a,0xe7cb06,0xdecb03,0xe4c908,0xe2ca06,0xe1cb04,0x8d710e,0xdfc806,0xe4c906,0xe6cb08,0xe3cd08,0xe3c805,
0xe1cb06,0xe2ca06,0xe1cb06,0xe1cb06,0xe1cb06,0xe1cb04,0xe0c712,0xdec423,0xdbbe3b,0x9a8505,0x8b6d00,0x9a7905,0x8b7019,0xb89a1e,0xe4ca1e,0xdecd0e,0xe3c83a,0xe6c90b,0xe0cd07,0xddcb05,0xe1cb06,0xe3cb07,
0xe0ca05,0xe0ca05,0xe1cb06,0xe1c905,0xdeca07,0xb08d11,0xe4c819,0xd0b437,0xe2cf07,0xe3ca0b,0xe4c602,0xe4cc08,0xd2c030,0xe2ca08,0xdfc613,0xd4bb3d,0xe8cc19,0xe0ce0a,0xdfcc06,0xe1c806,0xddc71a,0xe0ca2b,
0xe2c905,0xe1c905,0xe3cb07,0xdfca0e,0xcdb51f,0xe0ce02,0xe2ca04,0xe0c815,0xe2cf09,0xe1cb06,0xdfcc06,0xdecb02,0xd7c50e,0xe2cb0d,0xe2cd06,0xc1b13a,0xe4cc13,0xd9cd36,0xa09255,0x6e928e,0x769dac,0x6f9dac,
0xe2ca06,0xe2ca06,0xe0c60c,0xd6c04a,0xe6c819,0xe1cb04,0xe4cc08,0xe6ca0f,0xe4cc25,0xdfcb0c,0xe0c70a,0xe0c821,0xdec141,0xdec43d,0xe0c521,0xd8c232,0x7e9bab,0x6e9cb3,0x719aae,0x719bab,0x719cad,0x6f9fad,
0xe4ce09,0xe2cc07,0xd8be21,0xddc622,0xe5ce10,0xe3c805,0xe0ca03,0xdec915,0x5e4800,0xb9984f,0xb7954c,0xbb9251,0xbd9356,0xb79649,0xb7984f,0x7a5a21,0x8a91a4,0x6c9cae,0x6e9cb3,0x6d9ead,0x6d9ead,0x709bac,
0xe5cb02,0xd9c410,0xe3ca13,0xe3cc0f,0xddc51f,0xe1c910,0x806308,0xb99652,0xbb9357,0xbb954e,0xbc944c,0xbc944c,0xbc944e,0xbd954e,0xbd974e,0xbf9646,0xbe9455,0xaf9866,0x7c98a8,0x6d9cac,0x6d9bad,0x729dae,
0xe4c032,0xd7bd0a,0xe9cb24,0xe2cd00,0xa08421,0xbc964b,0xbb9453,0xba964c,0xba954e,0xbe974c,0xbd964b,0xbd964b,0xbe974c,0xbd964b,0xbd954a,0xbd964b,0xbc954a,0xbc964f,0xbd8e52,0x43453c,0x6e9daf,0x184153,
0xa05866,0xf0e1ca,0xc5ad54,0xd7c114,0xb8984f,0xc1914f,0xbb954e,0xbd964b,0xb8974a,0xbd964b,0xbd964b,0xbe974c,0xbd964b,0xbe974c,0xbd964b,0xc19a4f,0xbd964b,0xbd964b,0xbd964b,0xbf8b55,0x7b96ab,0x719ab0,
0xa45c66,0xebdbe1,0x69637e,0xcab254,0xba9153,0xbc944c,0xbb954e,0xbd954d,0xbe944c,0xbd9649,0xbd964b,0xbd964b,0xbd964b,0xbe974c,0xbd964b,0xbd964b,0xbd964b,0xbd964b,0xbd964b,0xba944b,0x424348,0x6d9cab,
0xa75c67,0xb5bab4,0x404f64,0x547b82,0xb9905d,0xbb954c,0xba954e,0xbc944e,0xbb934e,0xbb944f,0xbb934e,0xbe944a,0xbb954e,0xbb954c,0xbd9648,0xbb954c,0xbd964b,0xb9954b,0xbc954a,0xbb934d,0xb39572,0x6e9bb0,
0xa06559,0x969789,0x86a3b1,0x50808e,0xa79275,0xb99352,0xbb954e,0xba944d,0xba954e,0xbe934e,0xbb954c,0xbd964b,0xbe974c,0xbe974c,0xbd964b,0xbd954b,0xbc944f,0xbd9457,0xbc9959,0xbb954e,0xaf8c4c,0x7599ac,
0xb4746f,0xfae7ad,0xb3a98e,0x7495a4,0x3e3421,0xbf934a,0xbc944e,0xbb954e,0xb8964c,0xb6964d,0xba954e,0xbf9450,0xbe974c,0xbc954a,0xbd964b,0xbd954d,0xbd924e,0xbf8e4d,0xb09369,0xba964b,0xb89052,0x829ea1,
0xb36272,0xb25c70,0x6d2334,0x8392af,0x838f81,0xba924d,0xbb954c,0xbb954d,0xba944b,0xbc934d,0xbc964f,0xbb954c,0xbb954c,0xbc944e,0xbd964b,0xbd974c,0xbd954c,0xb39246,0x816134,0x754e12,0xbb954e,0x344137,
0x0c0d11,0x3b2b33,0x9d808c,0x7d9cb8,0x829ba4,0xbe944f,0xba954f,0xb7954f,0xb8964e,0xb7954b,0xb8964c,0xb8964f,0xbb9447,0xb99549,0xb8954d,0xbe964e,0xbc954a,0xbd9649,0xb5924e,0xb09158,0xba9254,0x53605f,
0x06453a,0x154339,0x124a41,0x6f9daa,0x7798a1,0xb79663,0xbc984e,0xb8964f,0xb8964c,0xb8964f,0xb7974c,0xb8964c,0xbb974d,0xb8964c,0xb8964e,0xb8974a,0xb7954d,0xbd9649,0xb9944d,0xbb945d,0xb19563,0x6d9bae,
0x00372c,0x1e5047,0x0d443e,0x769eae,0x7899ac,0x7d6d4b,0xbb954d,0xb8964f,0xb7954d,0xba964c,0xba954e,0xb8964c,0xb59349,0xb89550,0x704f1e,0x593900,0xba944d,0xbc954a,0xbd954f,0xb3905c,0x7195a5,0x709eae,
0x154c46,0x0e4540,0x0d443e,0x719eb1,0x749aad,0x899aa3,0xb89252,0xba954c,0xbb9951,0xb7954b,0xb7964c,0xb8964c,0xba9449,0xbc984e,0xbb9652,0x7e6227,0xbe9052,0xbc954c,0xb5945c,0x5f6b6b,0x7397ad,0x6d9ead,
0x0f4e45,0x104f44,0x13483e,0x7899ac,0x749daf,0x6b92a1,0x6c673e,0xbb954c,0xbb974d,0xbc9750,0xb9974f,0xba954e,0xbb9252,0xb79748,0xbb964c,0xbb9451,0x546360,0x7493a2,0x7b9cad,0x6e9cb4,0x6a9eac,0x6d9ead,
0x164b3d,0x2a5351,0x24534b,0x163441,0x729dae,0x759bae,0x6c999f,0xb49667,0xbe944c,0xb69550,0xbc9658,0xbe9247,0xbb9447,0xbfa263,0x779895,0x7697ac,0x719cad,0x6d9ead,0x749fb0,0x6d9ead,0x6d9ead,0x6d9ead,
0xa66879,0x98647b,0x815f7a,0x6c4560,0x7699ae,0x729bad,0x709eae,0x749eae,0x69807b,0xb19c6d,0xb49658,0xa09780,0x5c707f,0x6a9baf,0x6d9ead,0x6f9eae,0x6d9ead,0x6d9ead,0x6e9fae,0x6d9ead,0x6d9ead,0x6d9ead
};

const long Noot[] PROGMEM =
{
0x1c1d32,0x1c1d32,0x1d1d35,0x1e1f35,0x1e1e36,0x1f1f37,0x1d1e34,0x1c1d2f,0x101211,0x101113,0x0f1110,0x0f1110,0x0f1110,0x101115,0x0f1012,0x161622,0x1e1f35,0x1f2035,0x1d1d35,0x1d1d35,0x1d1d35,0x1c1c34,
0x282947,0x282947,0x272846,0x282948,0x2a2949,0x111216,0x111312,0x111214,0x111214,0x111214,0x111214,0x111214,0x111214,0x111214,0x111214,0x111214,0x111214,0x111311,0x2a2a47,0x282948,0x282948,0x292848,
0x2c2f52,0x2d3053,0x2e3154,0x131622,0x101114,0x111214,0x111214,0x111214,0x111214,0x111214,0x111214,0x111214,0x111214,0x111214,0x111214,0x111214,0x111214,0x0d0e10,0x0b0b0b,0x222038,0x2d3053,0x2c2f52,
0x333259,0x34345c,0x0f101b,0x000000,0x050607,0x111214,0x111214,0x111214,0x111214,0x111215,0x111214,0x111214,0x111213,0x111214,0x111213,0x111214,0x101213,0x0e0f0e,0x000000,0x000100,0x111224,0x323258,
0x35375f,0x383755,0x000000,0x000000,0x0c0e0d,0x0f1110,0x111312,0x111312,0x101211,0x111211,0x101211,0x101211,0x0f1110,0x0f1110,0x080a09,0x020202,0x000000,0x000000,0x000000,0x000000,0x000000,0x302e47,
0x393b6a,0x000001,0x000000,0x020203,0x000100,0x030303,0x080a09,0x0b0d0c,0x0a0c0b,0x080a09,0x080a09,0x070908,0x090b0a,0x090b0a,0x090b0a,0x030303,0x000000,0x010101,0x010101,0x010101,0x000000,0x000000,
0x0d0f1f,0x000000,0xa3adad,0x232427,0x434a4b,0xa1aaab,0x000000,0x070707,0x070707,0x060606,0x060606,0x040404,0x040404,0x050505,0x050505,0x000000,0xa1a9aa,0x929a9c,0x202124,0x99a4a6,0x000000,0x000000,
0x020101,0x0d0e10,0x020403,0x3a3f41,0x010102,0xa3b0b1,0x010101,0x000000,0x010101,0x010101,0x000000,0x000000,0x000000,0x000000,0x000000,0x010101,0xa2acae,0x010103,0x353a3e,0x020202,0x9ba3a6,0x000000,
0x000000,0xa8b0b2,0x010101,0x020100,0x020204,0xa2afb0,0x020202,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x010102,0x8e9496,0x000000,0x070101,0x020100,0xa0abae,0x000000,
0x000000,0x65696d,0x060608,0xfefefe,0x9da4aa,0xa1abac,0x000000,0x000000,0x000000,0x020202,0x311e1b,0x4d3433,0x0d0100,0x000000,0x000000,0x010101,0xa1acb0,0x010002,0xe4e4e4,0x020202,0xa4aeb0,0x000000,
0x010101,0x020101,0xb8bec4,0xbecacc,0x494e51,0x000000,0x010101,0x633a34,0x643e39,0x785c5b,0x775e59,0x6f534f,0x653f39,0x643e35,0x010000,0x000000,0x020201,0xdde8eb,0xe1ebed,0xd9e4e8,0x000100,0x020202,
0x040404,0x24282b,0x222629,0x1f2426,0x1d1f1e,0x412927,0x613e38,0x623f39,0x623f39,0x76635d,0x76615e,0x63403a,0x63403a,0x63403a,0x623f39,0x030304,0x121413,0x131315,0x0f0f0f,0x0d0d0d,0x0f0f0f,0x040404,
0x0e0f11,0x303437,0x383d41,0x383d41,0x192021,0x63403a,0x63403a,0x64413b,0x64413a,0x786362,0x756060,0x65423c,0x65423c,0x64413b,0x64413b,0x774a46,0x33383c,0x32373b,0x32373b,0x34373c,0x363a3d,0x212224,
0x0e0f11,0x31363a,0x393e42,0x3c4045,0x63403a,0x65423c,0x66423e,0x664442,0x684644,0x664341,0x664341,0x624541,0x664540,0x664540,0x674440,0x8a534d,0x3a4148,0x3b4046,0x393e43,0x393e42,0x373c40,0x2d2e30,
0x090a0c,0x2e3337,0x383d43,0x393f46,0x90564f,0x764942,0xbe746a,0xc87c72,0xc67d74,0xc67d72,0xc77d74,0xca7f74,0xc5736a,0xa06159,0xc2726a,0x3d4350,0x384148,0x394048,0x3a4147,0x383d43,0x34393d,0x212226,
0x0e0d0d,0x23262b,0x343b41,0x353e44,0x344246,0x3a4149,0x374049,0x38424b,0x38434e,0x38434d,0x3a444f,0x39434e,0x394350,0x384351,0x38424c,0x38414b,0x37414a,0x37414a,0x374049,0x343b43,0x2b3336,0x1a1e21,
0x3b4878,0x0d1015,0x293037,0x353e47,0x36404a,0x36404c,0x36424e,0x36424e,0x35434e,0x36424e,0x37434f,0x37434e,0x36424e,0x35434e,0x36424e,0x37414d,0x36404a,0x39434d,0x333c43,0x2f363e,0x22252a,0x0d0e0f,
0x3d4875,0x424c75,0x161b1f,0x2a333a,0x34404c,0x34404c,0x35414d,0x36424e,0x354252,0x354252,0x364353,0x384554,0x374454,0x384555,0x394656,0x3a4656,0x384452,0x333f4b,0x2e373f,0x1e252b,0x070b0e,0x414973,
0x3a466e,0x3b476f,0x3a4773,0x151919,0x252d37,0x374552,0x374656,0x354454,0x344352,0x344352,0x344453,0x354554,0x364554,0x364655,0x364554,0x364353,0x35414e,0x2a323c,0x16191d,0x02030b,0x3d486f,0x3a456e,
0x364269,0x37436b,0x39456b,0x3a466e,0x343d5e,0x1a2229,0x303c48,0x344151,0x364657,0x374757,0x39495a,0x384858,0x354656,0x384655,0x334453,0x313e4e,0x222631,0x0d0e13,0x02070e,0x37436b,0x38446c,0x364269,
0x323f61,0x334063,0x354167,0x364268,0x38446a,0x354365,0x3c4768,0x0d1015,0x010103,0x010105,0x030303,0x020308,0x050409,0x020001,0x000000,0x000000,0x000000,0x000000,0x000000,0x010100,0x3b4468,0x334063,
0x2d3a5a,0x2f3c5c,0x313e61,0x323f62,0x324064,0x040300,0x000000,0x000000,0x020001,0x0c0c10,0x212933,0x283544,0x2b3848,0x283844,0x232c38,0x1e252f,0x11141a,0x0c0d10,0x010102,0x010101,0x000000,0x111625

};

const long Loss[] PROGMEM =
{
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x000000,0x000000,
0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x000000,0x000000,
0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,
0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,0xff0000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0xff0000,0x000000,0x000000,0xff0000,0xff0000,0xff0000,0xff0000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000
};

const long NPC1[] PROGMEM =
{
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0x000000,0x000000,0x000000,0x000000,0x8ffefe,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x060a0a,0x000000,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x000000,0x000000,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x000000,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa4a4a4,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa5a5a5,0xa6a6a6,0x000000,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x8bf8fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0x000000,0x87f1fb,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x010101,0x010101,0x010101,0x010101,0xa6a6a6,0x000000,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0x606060,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0x020202,0x010101,0x010101,0x010101,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x87f1f9,0x000000,0xa6a6a6,0xa3a3a3,0xa6a6a6,0xa6a6a6,0x020202,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x030404,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x000000,0x87f2fb,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa1a1a1,0x000000,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd
};

const long NPC2[] PROGMEM =
{
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0x000000,0x000000,0x000000,0x000000,0x8ffefe,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x060a0a,0x000000,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x000000,0x000000,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x000000,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x000000,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x000000,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa4a4a4,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa5a5a5,0xa6a6a6,0x000000,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x8bf8fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0x000000,0x87f1fb,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x010101,0x010101,0x010101,0x010101,0xa6a6a6,0x000000,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0x606060,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0x020202,0x010101,0x010101,0x010101,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x87f1f9,0x000000,0xa6a6a6,0xa3a3a3,0xa6a6a6,0xa6a6a6,0x020202,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x030404,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0x000000,0x000000,0x87f2fb,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,
0x88f3fd,0x88f3fd,0x88f3fd,0x000000,0xa6a6a6,0x000000,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa6a6a6,0xa1a1a1,0x000000,0x000000,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd,0x88f3fd
};

const long Pop1[] PROGMEM =
{
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xcebcbd,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x847163,0x030101,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xb59d98,0xc0a89c,0xb8ac9f,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x83675c,0x92776e,0x826859,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x96876d,0xad9a8c,0xbb9b9e,0xb69a95,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x856860,0x866b60,0x967c6f,0x7b624e,0x96816d,0x988b81,0x807461,0x9f958b,0xe7ded7,0xefe2da,0xc4b8a0,0xb09e88,0xa78b76,0xbb9890,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x836158,0x805f50,0x90705b,0x8d6c5d,0x8a7251,0x947e69,0xdacbb8,0xe7dcd6,0xe4ddd7,0xede3e1,0xe7dad4,0xcec0af,0xa78770,0xc3a99a,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x9f8c81,0x7d5d4a,0x8e665e,0x9a7b69,0x8c6c59,0x9f8574,0x533f34,0x4e3f38,0xd7cec7,0xeae3db,0xe9e0d9,0x3f3122,0x563f2d,0xc3a795,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0xbc9b95,0x875c55,0x916c5f,0x856958,0xbda193,0xe7d6c2,0xd7c3ba,0xebdcd5,0xe3dcd2,0xe1cfcb,0xd4c9c0,0xf4e3db,0xd5c3be,0x453f41,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0xad8981,0x8d6763,0x806353,0x463022,0x8f7964,0xae9c8b,0xd1bfb3,0xd1c3bd,0xdacdc2,0xa48980,0xc3a29b,0xb19893,0xa58d88,0x9e8984,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x725b46,0x5d4833,0x4f3c2b,0x4c3a26,0x907a65,0x947a6b,0x7e6958,0x7e685a,0x7d6559,0x785551,0x6e4943,0x6c4e46,0x81635b,0x85695d,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x030202,0x3f2d1f,0x2b1811,0x69583d,0x937b6f,0x896f62,0x896f5e,0x806a5d,0x81655a,0x7e625f,0x815f5d,0x7d6355,0x7a5e50,0x826b5b,0x010100,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x392713,0x2d1a14,0x5f4e32,0x947a69,0x8e7161,0x89735d,0x867063,0x7e6956,0x7f6a57,0x7e685b,0x7a6353,0x755a51,0x7e6c5d,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x836d5a,0x281809,0x533f27,0x8d7762,0x927762,0x8d7762,0x866e62,0x7e6853,0x776247,0x796445,0x6f5942,0x7a6051,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0xa7977e,0x6f5c50,0x88745c,0x937c6a,0x977f67,0x91795e,0x8b7160,0x816854,0x7d6549,0x7d654b,0x7d6656,0x886d62,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0xa89281,0x967e72,0x987e70,0x968365,0x937e61,0x91775c,0x886e55,0x84665c,0x866763,0x816756,0x826b5b,0x8a7564,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0xb8b2a9,0xa49180,0x99876f,0x978071,0x967d68,0x927b59,0x8e765a,0x89705c,0x866b60,0x846865,0x816861,0x846e57,0x8f7d67,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0xb6a78c,0xa38c7c,0x9f897b,0x9e8274,0x9c8671,0x968067,0x957e5f,0x8f7660,0x896e63,0x896f62,0x826f61,0x826c57,0x77695c,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0xbebaa7,0xad9c8a,0xa3917d,0x9f8d77,0x9b8673,0x9e8473,0x9c8575,0x9a8166,0x967b72,0x8e726f,0x896e67,0x847162,0x836a56,0x877363,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0xd2c7b3,0xad9c82,0xa79581,0xa49171,0x9f8a75,0x9e867a,0x998272,0x977f67,0x957b6b,0x8e7270,0x8c6f69,0x8a6f64,0x867152,0x8b7361,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0xcac1b8,0xd0c4b6,0xa8967e,0xa79678,0xa5936f,0xa28b79,0xa0887c,0x988678,0x97806e,0x927e63,0x8c765f,0x8e7368,0x8a715e,0x8b7162,0x8f786a,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0xe1d7cd,0xcbb9af,0xa5957c,0xa29175,0xa49470,0x9f906f,0xa28b79,0x9c8679,0x988074,0x937e5e,0x947771,0x917769,0x8a745f,0x8d756b,0x8e7861,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0xd4cbc1,0xddd6cc,0xbdb1a7,0xa4947a,0xa59574,0xa49473,0xa28f74,0x9f8d77,0xa08a75,0x9a846d,0x937e5f,0x927965,0x8e755f,0x8d7267,0x866e6e,0x907667,0x000000,0x000000,0x000000,0x000000,0x000000
};

const long Pop2[] PROGMEM =
{
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xcfc0b9,0x635954,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000400,0x8d7366,0x907b6a,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xa0978f,0xc2aaa6,0xb9a194,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x030100,0x856556,0x977a6c,0x8b755a,0xbca594,0x000000,0x010000,0xa69a8c,0xede3d9,0xf0e4d9,0xcab8a5,0xbea096,0xb58f8c,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x86645a,0x84664e,0x9d7f67,0x7d593f,0x8d7456,0xddccba,0xd5c8bf,0xe6dfd5,0xe9e2dc,0xe3d0c2,0xd4bbaf,0x9a8574,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x695d54,0x83604c,0x95725e,0x9a7c62,0x977768,0xbca99a,0xebdcd2,0xa49089,0x70534b,0x58332d,0x5c3b36,0xc1afa1,0xe3d0c2,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0xc5a193,0x8f6056,0x78644c,0xc0ae96,0xc9bdb1,0x82685b,0x210b00,0x240b04,0x210a04,0x1c0b04,0x230c04,0x7b5b50,0xa28e80,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x8e6f5f,0x896d5f,0x57412b,0xa9947f,0x96786d,0x291306,0x251106,0x301410,0x301411,0x2d1511,0x26100b,0x341510,0x89745f,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x060200,0x463926,0x6f5b42,0x977768,0x39170f,0x2e130c,0x331515,0x321412,0x331515,0x301615,0x311613,0x361712,0x7a6552,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x382717,0x725e46,0x8f6d63,0x39180f,0x391e17,0x351613,0x341713,0x341713,0x361714,0x3e1e1c,0x48261c,0x7e6a4f,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x43301f,0x675c40,0x947863,0x836259,0x512822,0x4e1e1a,0x3e1913,0x3b1814,0x401d19,0x582522,0x72413a,0x87735a,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xae967e,0x846b57,0x9b7d72,0x967a6e,0x825d55,0x71403c,0x5c2c28,0x582824,0x632e2c,0x7a3c3a,0x846259,0x020202,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xa79378,0x9a8065,0x9a7f6a,0x997e6d,0x937666,0x906c60,0x85564e,0x7e5040,0x7c5140,0x886253,0x7a6957,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xa88e7d,0xa0866d,0x9d836a,0x987e65,0x957a60,0x8f7060,0x89675b,0x7f5e4d,0x786042,0x7f675c,0x988674,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0xb4a98f,0xad9281,0xa78f6d,0xa48a6f,0x9f856c,0x9c806a,0x917368,0x8b6e60,0x866b58,0x846960,0x877356,0xa78b7d,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0x000000,0xb3a18d,0xa8967e,0xa38d68,0xa28a72,0xa08570,0x9f8273,0x997d65,0x917368,0x8f7568,0x886d64,0x8c7766,0xa18673,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x000000,0xe3d6c6,0xac9c83,0xa8977b,0xae9483,0xa08b76,0xa18b73,0x9a8373,0x968165,0x917567,0x90765d,0x8e7757,0x927668,0x988171,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0x130e0c,0xddd1c2,0xab9c74,0xa99475,0xa79273,0xa69176,0xa08b70,0x9e896c,0x967e6f,0x947771,0x947a5f,0x8d775d,0x8f795f,0x947f64,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0xded6c3,0xd2c9c4,0xa79378,0xa69277,0xa89473,0xa5947a,0xa38f77,0xa08773,0x9a846d,0x947d6f,0x917862,0x8f7461,0x927967,0x9a7f6e,0x000000,0x000000,0x000000,0x000000,0x000000,
0x000000,0x000000,0x000000,0xe0d2c7,0xcdbeb7,0xa68e82,0xa29177,0xa39070,0xa39070,0xa38e79,0xa48976,0x9f856c,0x9b8168,0x997e69,0x937a73,0x907468,0x95796b,0x000000,0x000000,0x000000,0x000000,0x000000
};

const long MRI1[] PROGMEM =
{
0x938f8c,0x938f8c,0x938f8c,0x938f8c,0x938f8c,0x938f8c,0x91908c,0x988e81,0x9a805f,0xa29072,0x968e83,0x92918d,0x95908c,0x908f8a,0x938f8c,0x938f8c,0x938f8c,0x938f8c,0x938f8c,0x938f8c,0x938f8c,0x90918c,
0x918e8b,0x918e8b,0x918e8b,0x8f908b,0x958c8d,0x8e918d,0x948d84,0x926f48,0x754f1c,0xa07141,0x845f39,0xbb9c7d,0x908066,0x8d8d8e,0x8d908d,0x918e8b,0x918e8b,0x918e8b,0x908f8b,0x908f8b,0x908f8b,0x90908b,
0x908f8b,0x908f8b,0x908f8b,0x8f908b,0x918f8d,0x958f84,0xb39671,0x7f4f24,0xcf9c7d,0xd2a182,0xd6a07e,0xc58b6b,0xb28160,0x9b8e87,0x8f8f8c,0x908f8b,0x908f8b,0x908f8b,0x908f8b,0x908f8b,0x908f8b,0x91908c,
0x908f8b,0x908f8b,0x908f8b,0x908f8a,0x8f908f,0x9d8e81,0x996d48,0xd8a383,0xd7a282,0xd8a686,0xd4a081,0xe0a689,0xb77a5e,0xa6785e,0x968b85,0x908f8b,0x908f8b,0x908f8b,0x908f8b,0x908f8b,0x908f8b,0x91908c,
0x908f8b,0x908f8b,0x908f8b,0x908f8a,0x8f8d91,0x98877a,0xd5a080,0xd8a183,0xd4a384,0xcf9c7e,0xd8a286,0xd69b7c,0xcb9969,0xb37f4c,0x866c55,0x8f8e8c,0x908f8d,0x928e8b,0x908f8b,0x908f8b,0x908f8b,0x908f8b,
0x908f8b,0x908f8b,0x908f8b,0x918e8d,0x939084,0xa5846b,0xd0987e,0xd29f75,0xcf9f71,0xd2a071,0xdda685,0xd4987e,0x764123,0x602e08,0x9e714f,0x989489,0x928e8a,0x908f8b,0x908f8b,0x908f8b,0x908f8b,0x908f8b,
0x908f8b,0x908f8b,0x908f8b,0x918f8e,0x9a8f7f,0xc0906c,0xca9a77,0xce9f68,0xba8555,0x854a23,0xd49a7d,0xd29b80,0x703e24,0x8e5845,0xb17658,0x958b78,0x908e8e,0x908f8a,0x908f8b,0x908f8b,0x908f8b,0x91908c,
0x908f8b,0x908f8b,0x908f8b,0x8f8f8d,0xa18e70,0xc28d6b,0xc69862,0x935732,0x8e4c29,0xbe7c5a,0xbd7c5e,0xcf957a,0x643418,0xb27b63,0xa76f54,0x8c7862,0x8e8d8a,0x928f8a,0x908f8b,0x908f8b,0x908f8b,0x908f8b,
0x908f8b,0x908f8b,0x908f8b,0x929195,0xa68a60,0xc4896e,0x9b5e42,0x806451,0x5e4235,0xbd7e60,0xb67451,0xd2967a,0x603a2b,0x705a52,0x85513b,0x79563f,0x8f9189,0x8f908b,0x908f8b,0x908f8b,0x908f8b,0x908f8b,
0x908f8d,0x928e8a,0x908f8b,0x929088,0xaa865f,0xbc8067,0xc58b71,0xbc8e7e,0xb08a7c,0xc7886a,0xc0785b,0xca9077,0x66321f,0xac8270,0xa56b56,0xb27b65,0x98908a,0x8f8f8c,0x908f8b,0x908f8b,0x908f8b,0x908f8b,
0x928e8f,0x8e8e8c,0x968c89,0xa1725c,0x9f7249,0xc17d68,0xcd947c,0xd69d82,0xcd8c6f,0xba765a,0xc88165,0xcb8d74,0x723d23,0xd29175,0xcc9075,0x955e47,0x57322b,0x958d8b,0x908f8b,0x908f8b,0x908f8b,0x908f8b,
0x938d8c,0x8a918a,0x9f8b83,0x9c6346,0xa77555,0xba7d65,0xc17766,0xba7663,0xa86b59,0xbd8063,0xc9866b,0xd19276,0x733c25,0xb58170,0xb47969,0x976451,0x5e3528,0x918f8d,0x908f8b,0x908f8b,0x908f8b,0x908f8b,
0x8f908a,0x908e8f,0x988b8a,0xba8568,0xa87550,0xba7c6a,0xb47563,0xc58b77,0xa46d58,0xd09b82,0xc88f7b,0x8d5436,0x774426,0x966652,0x9a6150,0x9e6f5a,0x674236,0x908f8c,0x908f8b,0x908f8b,0x908f8b,0x91908c,
0x908f8b,0x90908d,0x908f8b,0xa18d82,0x986d50,0xc1846f,0xc08974,0xc38c77,0xc9927d,0xca947b,0xcc9380,0xcb907d,0xc28b72,0xab7863,0xac7863,0xa3705f,0x84685c,0x8f8f8f,0x908f8b,0x908f8b,0x908f8b,0x908f8b,
0x908f8b,0x918e8b,0x918e8c,0x918e8d,0xb0826e,0xbb816c,0xc28975,0xc48d79,0xc8917d,0xcd957d,0xcc937f,0xc88f7c,0xbf8a75,0xb17d67,0xa06c57,0xa77663,0x775548,0x8e8e8c,0x908f8b,0x908f8b,0x908f8b,0x8f908b,
0x908f8d,0x918e8b,0x908f8a,0x978c86,0xb47d6c,0xc18772,0xc38c78,0xc6907b,0xc8937f,0xce967f,0xca917d,0xc68d7a,0xc08975,0xb27e69,0xa4715c,0x9d6d5c,0x755040,0x8f908b,0x908f8b,0x908f8b,0x908f8b,0x8f908b,
0x908f8a,0x8f908c,0x928e8d,0x9d8b81,0xb27d6a,0xbe8674,0xc08d78,0xc4907b,0xca917e,0xcd9481,0xcb927f,0xc48b78,0xbb8674,0xb47f6d,0xaa7563,0x9a6c57,0x74513f,0x908e8a,0x908f8b,0x908f8b,0x908f8b,0x8f908b,
0x908f8b,0x8e908f,0x938e8a,0xba927b,0xb47761,0xb67f70,0xbf8c77,0xc18d78,0xc7907c,0xc99180,0xca9280,0xc8917d,0xc08d7a,0xbb8674,0xb17968,0x996755,0x764f3c,0x938883,0x908f8b,0x908f8b,0x908f8b,0x8f908b,
0x908f8a,0x8f8b8c,0xa38c7d,0xc6896d,0xb1745d,0xb07965,0xb77c6a,0xbc8671,0xb78771,0xbc8872,0xc08d77,0xc08c76,0xbd8878,0xb37b6a,0xa16c5a,0x8b5b47,0x6f4a38,0x8b726c,0x8e8e8c,0x8f8e8a,0x918e8b,0x8f908b,
0x8f8f8c,0x93928d,0xc2937c,0xc38a6d,0xb58267,0x9b6352,0xa77864,0xa3735d,0xa6745f,0xad7460,0xab735e,0xa86f5b,0xaa705c,0xa26a56,0x8e5d4e,0x6b463b,0x6f4939,0x745144,0x9f9793,0x8f908b,0x928e8c,0x8f908b,
0x928d82,0x08080a,0x755548,0xc08773,0xba7a60,0xb47c65,0x8e5942,0x915f4a,0x9e6f5d,0x9b6954,0x9d6c57,0x9e6c58,0x986a57,0x936652,0x714a3b,0x68433b,0x6b4033,0x71493b,0x6f5752,0x93948f,0x8c8d8b,0x8f908b,
0x792622,0x030609,0x090709,0x2c1f13,0xb87e6b,0xb5765f,0xb07458,0xab7257,0x8f5841,0x673c2a,0x714634,0x784d3c,0x764b39,0x704b41,0x5f3a30,0x663c2e,0x694330,0x674a41,0x0b0102,0x09090d,0x999799,0x8f908b
};

const long MRI2[] PROGMEM =
{
0x444243,0x4b494a,0x4d4d4d,0x4a4a4a,0x2e2e2e,0x1e1e1e,0x101010,0x151515,0x1e1e1e,0x2d2d2d,0x2a2a2a,0x222222,0x3f3f3f,0x4e4e4e,0x535353,0x616161,0x6b6b6b,0x5b5b5b,0x585858,0x616161,0x575757,0x494949,
0x393738,0x454344,0x404040,0x3a3a3a,0x252525,0x101010,0x0e0e0e,0x141414,0x0e0e0e,0x0e0e0e,0x191919,0x0f0f0f,0x3a3a3a,0x555555,0x6e6e6e,0x797979,0x717171,0x6e6e6e,0x747474,0x6c6c6c,0x676767,0x4f4f4f,
0x444243,0x424041,0x393939,0x3f3f3f,0x262626,0x131313,0x151515,0x060606,0x070707,0x0a0a0a,0x040404,0x060606,0x0d0d0d,0x696969,0x7a7a7a,0x7b7b7b,0x757575,0x797979,0x767676,0x777777,0x717171,0x686868,
0x504d4f,0x474647,0x3c3c3c,0x333333,0x343434,0x303030,0x454545,0x080808,0x929292,0xa9a9a9,0xb2b2b2,0xacacac,0x101010,0x0f0f0f,0x848484,0x7f7f7f,0x777777,0x7d7d7d,0x7a7a7a,0x797979,0x767676,0x6a6a6a,
0x4a4849,0x4d4c4d,0x3e3e3e,0x3d3d3d,0x363636,0x4c4c4c,0x0a0a0a,0xaeaeae,0xa9a9a9,0xaeaeae,0xbdbdbd,0xc6c6c6,0x9d9d9d,0x6f6f6f,0x070707,0x868686,0x7b7b7b,0x7b7b7b,0x7e7e7e,0x7a7a7a,0x747474,0x6b6b6b,
0x434142,0x424041,0x3a3a3a,0x383838,0x3d3d3d,0x565656,0xb4b4b4,0x9f9f9f,0x9e9e9e,0xb2b2b2,0xc0c0c0,0xcecece,0x9a9a9a,0x292929,0x080808,0x636363,0x808080,0x727272,0x757575,0x818181,0x747474,0x707070,
0x2f2d2e,0x252425,0x181818,0x141414,0x1d1d1d,0x171717,0x959595,0x979797,0x979797,0xa9a9a9,0xc1c1c1,0xbbbbbb,0xaaaaaa,0x323232,0x0a0a0a,0x080808,0x797979,0x686868,0x6e6e6e,0x7c7c7c,0x727272,0x666666,
0x211f20,0x1e1c1d,0x0d0d0d,0x0b0b0b,0x131313,0x090909,0x262626,0x0e0e0e,0x030303,0x020202,0x050505,0xbcbcbc,0x060606,0x080808,0x080808,0x060606,0x888888,0x646464,0x6b6b6b,0x7a7a7a,0x707070,0x727272,
0x302e2f,0x222021,0x0d0d0d,0x0d0d0d,0x1f1f1f,0x010101,0x010101,0x010101,0x000000,0x040404,0x0d0d0d,0x979797,0x080808,0x030303,0x010101,0x010101,0x777777,0x6a6a6a,0x6a6a6a,0x818181,0x797979,0x727272,
0x434142,0x252324,0x161616,0x222222,0x3f3f3f,0x050505,0x010101,0x010101,0x010101,0x1f1f1f,0x3c3c3c,0x8e8e8e,0x0a0a0a,0x000000,0x000000,0x010101,0x4a4a4a,0x686868,0x656565,0x777777,0x7b7b7b,0x787878,
0x434142,0x3d3b3c,0x1d1d1d,0x3a3a3a,0x424242,0x3b3b3b,0x050505,0x040404,0x0c0c0c,0x010101,0x3c3c3c,0xb7b7b7,0x0c0c0c,0x010101,0x000000,0x010101,0x060606,0x767676,0x696969,0x737373,0x777777,0x737373,
0x484647,0x444243,0x3d3d3d,0x313131,0x1c1c1c,0x262626,0x8f8f8f,0x9d9d9d,0x959595,0x464646,0x040404,0x7a7a7a,0x030303,0x040404,0x000000,0x030303,0x0a0a0a,0x787878,0x696969,0x686868,0x737373,0x6f6f6f,
0x484647,0x3f3d3e,0x3c3c3c,0x1d1d1d,0x2d2d2d,0x191919,0xa2a2a2,0x868686,0x101010,0x575757,0x212121,0x181818,0x060606,0x090909,0x070707,0x090909,0x0a0a0a,0x7e7e7e,0x676767,0x606060,0x5e5e5e,0x636363,
0x343434,0x1f1f1f,0x151515,0x454545,0x2f2f2f,0x2e2e2e,0x404040,0x212121,0x4a4a4a,0x7f7f7f,0x5e5e5e,0x171717,0x0b0b0b,0x080808,0x080808,0x0a0a0a,0x0b0b0b,0x727272,0x686868,0x4d4d4d,0x535353,0x535353,
0x121212,0x0a0a0a,0x0b0b0b,0x080808,0x0f0f0f,0x555555,0x2a2a2a,0x1b1b1b,0x101010,0x6b6b6b,0x757575,0x1e1e1e,0x040404,0x070707,0x0f0f0f,0x3a3a3a,0x0b0b0b,0x7a7a7a,0x696969,0x4b4b4b,0x4a4a4a,0x4d4d4d,
0x0e0e0e,0x090909,0x0a0a0a,0x0c0c0c,0x151515,0x464646,0x444444,0xb2b2b2,0x9b9b9b,0xc6c6c6,0xc6c6c6,0x979797,0x535353,0x0b0b0b,0x8a8a8a,0x0e0e0e,0x0b0b0b,0x676767,0x656565,0x4c4c4c,0x3d3d3d,0x454545,
0x0c0c0c,0x0a0a0a,0x080808,0x0b0b0b,0x0e0e0e,0x323232,0x828282,0x8a8a8a,0xb3b3b3,0xb4b4b4,0xaeaeae,0x7e7e7e,0x4f4f4f,0x0a0a0a,0x3f3f3f,0x070707,0x080808,0x3a3a3a,0x696969,0x505050,0x454545,0x525252,
0x090909,0x0a0a0a,0x090909,0x090909,0x070707,0x161616,0x6e6e6e,0x828282,0xa7a7a7,0xa9a9a9,0xc4c4c4,0xb4b4b4,0x757575,0x313131,0x080808,0x090909,0x090909,0x2e2e2e,0x676767,0x5b5b5b,0x474747,0x444444,
0x0a0a0a,0x0a0a0a,0x090909,0x080808,0x0a0a0a,0x090909,0x343434,0x616161,0x999999,0xbfbfbf,0xb7b7b7,0xb4b4b4,0x888888,0x292929,0x090909,0x090909,0x090909,0x070707,0x696969,0x676767,0x515151,0x424242,
0x0a0a0a,0x070707,0x101010,0x060606,0x101010,0x050505,0x0a0a0a,0x333333,0x0d0d0d,0x4f4f4f,0x515151,0x2d2d2d,0x1f1f1f,0x080808,0x090909,0x080808,0x090909,0x0b0b0b,0x737373,0x5c5c5c,0x434343,0x3f3f3f,
0x070707,0x080808,0x161616,0x505050,0x0e0e0e,0x0e0e0e,0x090909,0x080808,0x070707,0x080808,0x0a0a0a,0x090909,0x0a0a0a,0x070707,0x080808,0x080808,0x090909,0x0a0a0a,0x090909,0x4f4f4f,0x373737,0x363636,
0x080808,0x090909,0x0d0d0d,0x848484,0x141414,0x090909,0x0a0a0a,0x090909,0x0a0a0a,0x090909,0x090909,0x080808,0x080808,0x0b0b0b,0x080808,0x090909,0x090909,0x0a0a0a,0x0a0a0a,0x040404,0x323232,0x282828
};

int num_img = 2;
long npc[] = {NPC1, NPC2};
const long pop_cat[] = {Pop1, Pop2};
const long uncanny[] = {MRI1, MRI2};
// const long pingu[] = {Noot};
long meme_arr[] = {Loss, Noot, Arthur, Doge};

void setup() {
    Serial.begin(115200);
    // XY Matrix
    FastLED.addLeds<CHIPSET, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalSMD5050);
    FastLED.setBrightness(BRIGHTNESS);
    FastLED.clear();

    pinMode(BUTTON1, INPUT);
    pinMode(BUTTON2, INPUT);
    pinMode(BUTTON3, INPUT);
    pinMode(BUTTON4, INPUT);

    StartFlash();
}

void loop() {
//    for (int c = 0; c < num_img; c++) { DrawOneFrame(npc[c]); }
  
    for (int c = 0; c < num_img; c++) {DrawOneFrame(pop_cat[c]);
        /** TODO: Add button controls */
//        Serial.println(MULTIPLIER);
        for (int c=0; c < MULTIPLIER; c+=10) {
    //    Speed up flashing
          if (digitalRead(BUTTON1)) {
            if (MULTIPLIER > 1) {
              MULTIPLIER -= 1;
              Serial.print(MULTIPLIER);
              Serial.println(" Decrease Delay...");
            }
          }
    //    Slow down flashing
          if (digitalRead(BUTTON2)) {
            if (MULTIPLIER < 255) {
              MULTIPLIER += 1;
            }
              Serial.print(MULTIPLIER);
            Serial.println(" Increase Delay...");
          }
    //    Pause/play Flashing
    //    Toggle Mode
          delay(BLINK_TIME);
        }
    }

//    for (int c = 0; c < num_img; c++) { DrawOneFrame(uncanny[c]); }

//    for (int c = 0; c < 4; c++) { DrawOneFrame(meme_arr[c]); }

}

void StartFlash() {
    for (int i=0; i<NUM_LEDS; i++) {
        leds[i] = 0xff0000;
    }
    FastLED.show();
    delay(BLINK_TIME*20);

    for (int i=0; i<NUM_LEDS; i++) {
        leds[i] = 0x00ff00;
    }
    FastLED.show();
    delay(BLINK_TIME*20);

    for (int i=0; i<NUM_LEDS; i++) {
        leds[i] = 0x0000ff;
    }
    FastLED.show();
    delay(BLINK_TIME*20);

    for (int i=0; i<NUM_LEDS; i++) {
        leds[i] = 0x000000;
    }
    FastLED.show();
}

void DrawOneFrame(const long pixel_arr[])
{
    for(byte y=0; y<LENGTH; y++) {
        for(byte x=0; x<WIDTH; x++) {
            leds[XY(x,y)] = pgm_read_dword(&pixel_arr[(y * WIDTH) + x]);
        }
    }
    FastLED.show();
}
